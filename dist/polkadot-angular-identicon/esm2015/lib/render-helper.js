import { polkadotIcon, beachballIcon } from '@polkadot/ui-shared/icons';
import * as jdenticon from 'jdenticon';
import { DEFAULT_SIZE, THEMES_ENUM } from './constants';
export class RenderHelper {
    /// Function that choose render function according to which parameters are passed
    static pickRenderFunction(address, theme, size = DEFAULT_SIZE) {
        if (address) {
            switch (theme) {
                case THEMES_ENUM.POLKADOT:
                    return this.renderPolkadotIdenticon(address, '', false, size, '');
                case THEMES_ENUM.BEACHBALL:
                    return this.renderBeachballIdenticon(address, false, size);
                case THEMES_ENUM.JDENTICON:
                    return this.renderJidenticon(address, size);
                default:
                    return this.renderEmptyIdenticon(size);
            }
        }
        else {
            return this.renderEmptyIdenticon(size);
        }
    }
    /// function called when the polkadot theme is passed. This function renders the circle with a color
    static renderCircle({ cx, cy, fill, r }, key) {
        let svg = `<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                <circle cx="${cx}"  cy="${cy}" fill="${fill}"  r="${r}" />
                </svg>`;
        return svg;
    }
    /// This function renders the polkadot identicon when the polkadot theme is passed
    static renderPolkadotIdenticon(address, className = '', isAlternative = false, size, style) {
        return `<svg
            height=${size}
            viewBox='0 0 64 64'
            width=${size}>
            ${polkadotIcon(address, { isAlternative }).map(this.renderCircle).join('')}
            </svg>`;
    }
    /// This function renders the beachball identicon when the beachball theme is passed
    static renderBeachballIdenticon(address, isAlternative = false, size) {
        let generatedBeachballIcon = beachballIcon(address, { isAlternative: isAlternative, size });
        return generatedBeachballIcon.innerHTML;
    }
    /// This empty identicon will be diplayed if a wrong Substrate address is passed
    static renderEmptyIdenticon(size) {
        return `<div>
              <svg :height="size" viewBox="0 0 64 64" :width="size" >
                <circle cx="50%" cy="50%" fill="#eee" r="50%" />
              </svg>
            </div>`;
    }
    /// This function renders the jdenticon identicon when the jdenticon theme is passed
    static renderJidenticon(address, size) {
        return jdenticon.toSvg(address, size);
    }
    /// This helper function picks the theme according to the passed parameters
    ///
    static themeFilter(theme) {
        if (theme === THEMES_ENUM.POLKADOT || !theme) {
            return THEMES_ENUM.POLKADOT;
        }
        else if (theme === THEMES_ENUM.BEACHBALL) {
            return THEMES_ENUM.POLKADOT;
        }
        else if (theme === THEMES_ENUM.JDENTICON) {
            return THEMES_ENUM.JDENTICON;
        }
        else {
            return THEMES_ENUM.EMPTY;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLWhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3BvbGthZG90LWFuZ3VsYXItaWRlbnRpY29uL3NyYy9saWIvcmVuZGVyLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXhFLE9BQU8sS0FBSyxTQUFTLE1BQU0sV0FBVyxDQUFDO0FBRXZDLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhELE1BQU0sT0FBTyxZQUFZO0lBRXZCLGlGQUFpRjtJQUNqRixNQUFNLENBQUMsa0JBQWtCLENBQUMsT0FBZSxFQUFFLEtBQWEsRUFBRSxPQUFlLFlBQVk7UUFDbkYsSUFBSSxPQUFPLEVBQUU7WUFDWCxRQUFRLEtBQUssRUFBRTtnQkFDYixLQUFLLFdBQVcsQ0FBQyxRQUFRO29CQUN2QixPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBRXBFLEtBQUssV0FBVyxDQUFDLFNBQVM7b0JBQ3hCLE9BQU8sSUFBSSxDQUFDLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBRTdELEtBQUssV0FBVyxDQUFDLFNBQVM7b0JBQ3hCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFFOUM7b0JBQ0UsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDMUM7U0FDRjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdkM7SUFFSCxDQUFDO0lBRUQsb0dBQW9HO0lBQ3BHLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQVUsRUFBRSxHQUFXO1FBQzFELElBQUksR0FBRyxHQUFHOzhCQUNnQixFQUFFLFVBQVUsRUFBRSxXQUFXLElBQUksU0FBUyxDQUFDO3VCQUM5QyxDQUFDO1FBQ3BCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELGtGQUFrRjtJQUNsRixNQUFNLENBQUMsdUJBQXVCLENBQUMsT0FBZSxFQUFFLFNBQVMsR0FBRyxFQUFFLEVBQUUsYUFBYSxHQUFHLEtBQUssRUFBRSxJQUFZLEVBQUUsS0FBYTtRQUNoSCxPQUFPO3FCQUNVLElBQUk7O29CQUVMLElBQUk7Y0FDVixZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7bUJBQ25FLENBQUM7SUFFbEIsQ0FBQztJQUdELG9GQUFvRjtJQUNwRixNQUFNLENBQUMsd0JBQXdCLENBQUMsT0FBZSxFQUFFLGFBQWEsR0FBRyxLQUFLLEVBQUUsSUFBWTtRQUNsRixJQUFJLHNCQUFzQixHQUN4QixhQUFhLENBQUMsT0FBTyxFQUNuQixFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQ3ZDLENBQUM7UUFDSixPQUFPLHNCQUFzQixDQUFDLFNBQVMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsZ0ZBQWdGO0lBQ2hGLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFZO1FBQ3RDLE9BQU87Ozs7bUJBSVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsb0ZBQW9GO0lBQ3BGLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFlLEVBQUUsSUFBWTtRQUNuRCxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCwyRUFBMkU7SUFDM0UsR0FBRztJQUNILE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBYztRQUMvQixJQUFJLEtBQUssS0FBSyxXQUFXLENBQUMsUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzVDLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQTtTQUM1QjthQUFNLElBQUksS0FBSyxLQUFLLFdBQVcsQ0FBQyxTQUFTLEVBQUU7WUFDMUMsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFBO1NBQzVCO2FBQU0sSUFBSSxLQUFLLEtBQUssV0FBVyxDQUFDLFNBQVMsRUFBRTtZQUMxQyxPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUE7U0FDN0I7YUFBTTtZQUNMLE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQTtTQUN6QjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBvbGthZG90SWNvbiwgYmVhY2hiYWxsSWNvbiB9IGZyb20gJ0Bwb2xrYWRvdC91aS1zaGFyZWQvaWNvbnMnO1xuaW1wb3J0IHsgQ2lyY2xlIH0gZnJvbSAnQHBvbGthZG90L3VpLXNoYXJlZC9pY29ucy90eXBlcyc7XG5pbXBvcnQgKiBhcyBqZGVudGljb24gZnJvbSAnamRlbnRpY29uJztcblxuaW1wb3J0IHsgREVGQVVMVF9TSVpFLCBUSEVNRVNfRU5VTSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZXhwb3J0IGNsYXNzIFJlbmRlckhlbHBlciB7XG5cbiAgLy8vIEZ1bmN0aW9uIHRoYXQgY2hvb3NlIHJlbmRlciBmdW5jdGlvbiBhY2NvcmRpbmcgdG8gd2hpY2ggcGFyYW1ldGVycyBhcmUgcGFzc2VkXG4gIHN0YXRpYyBwaWNrUmVuZGVyRnVuY3Rpb24oYWRkcmVzczogc3RyaW5nLCB0aGVtZTogc3RyaW5nLCBzaXplOiBudW1iZXIgPSBERUZBVUxUX1NJWkUpOiBzdHJpbmcge1xuICAgIGlmIChhZGRyZXNzKSB7XG4gICAgICBzd2l0Y2ggKHRoZW1lKSB7XG4gICAgICAgIGNhc2UgVEhFTUVTX0VOVU0uUE9MS0FET1Q6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyUG9sa2Fkb3RJZGVudGljb24oYWRkcmVzcywgJycsIGZhbHNlLCBzaXplLCAnJyk7XG5cbiAgICAgICAgY2FzZSBUSEVNRVNfRU5VTS5CRUFDSEJBTEw6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyQmVhY2hiYWxsSWRlbnRpY29uKGFkZHJlc3MsIGZhbHNlLCBzaXplKTtcblxuICAgICAgICBjYXNlIFRIRU1FU19FTlVNLkpERU5USUNPTjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJKaWRlbnRpY29uKGFkZHJlc3MsIHNpemUpO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRW1wdHlJZGVudGljb24oc2l6ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckVtcHR5SWRlbnRpY29uKHNpemUpXG4gICAgfVxuXG4gIH1cblxuICAvLy8gZnVuY3Rpb24gY2FsbGVkIHdoZW4gdGhlIHBvbGthZG90IHRoZW1lIGlzIHBhc3NlZC4gVGhpcyBmdW5jdGlvbiByZW5kZXJzIHRoZSBjaXJjbGUgd2l0aCBhIGNvbG9yXG4gIHN0YXRpYyByZW5kZXJDaXJjbGUoeyBjeCwgY3ksIGZpbGwsIHIgfTogQ2lyY2xlLCBrZXk6IG51bWJlcikge1xuICAgIGxldCBzdmcgPSBgPHN2ZyB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICAgICAgICAgICAgPGNpcmNsZSBjeD1cIiR7Y3h9XCIgIGN5PVwiJHtjeX1cIiBmaWxsPVwiJHtmaWxsfVwiICByPVwiJHtyfVwiIC8+XG4gICAgICAgICAgICAgICAgPC9zdmc+YDtcbiAgICByZXR1cm4gc3ZnO1xuICB9XG5cbiAgLy8vIFRoaXMgZnVuY3Rpb24gcmVuZGVycyB0aGUgcG9sa2Fkb3QgaWRlbnRpY29uIHdoZW4gdGhlIHBvbGthZG90IHRoZW1lIGlzIHBhc3NlZFxuICBzdGF0aWMgcmVuZGVyUG9sa2Fkb3RJZGVudGljb24oYWRkcmVzczogc3RyaW5nLCBjbGFzc05hbWUgPSAnJywgaXNBbHRlcm5hdGl2ZSA9IGZhbHNlLCBzaXplOiBudW1iZXIsIHN0eWxlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYDxzdmdcbiAgICAgICAgICAgIGhlaWdodD0ke3NpemV9XG4gICAgICAgICAgICB2aWV3Qm94PScwIDAgNjQgNjQnXG4gICAgICAgICAgICB3aWR0aD0ke3NpemV9PlxuICAgICAgICAgICAgJHtwb2xrYWRvdEljb24oYWRkcmVzcywgeyBpc0FsdGVybmF0aXZlIH0pLm1hcCh0aGlzLnJlbmRlckNpcmNsZSkuam9pbignJyl9XG4gICAgICAgICAgICA8L3N2Zz5gO1xuXG4gIH1cblxuXG4gIC8vLyBUaGlzIGZ1bmN0aW9uIHJlbmRlcnMgdGhlIGJlYWNoYmFsbCBpZGVudGljb24gd2hlbiB0aGUgYmVhY2hiYWxsIHRoZW1lIGlzIHBhc3NlZFxuICBzdGF0aWMgcmVuZGVyQmVhY2hiYWxsSWRlbnRpY29uKGFkZHJlc3M6IHN0cmluZywgaXNBbHRlcm5hdGl2ZSA9IGZhbHNlLCBzaXplOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGxldCBnZW5lcmF0ZWRCZWFjaGJhbGxJY29uID1cbiAgICAgIGJlYWNoYmFsbEljb24oYWRkcmVzcyxcbiAgICAgICAgeyBpc0FsdGVybmF0aXZlOiBpc0FsdGVybmF0aXZlLCBzaXplIH0sXG4gICAgICApO1xuICAgIHJldHVybiBnZW5lcmF0ZWRCZWFjaGJhbGxJY29uLmlubmVySFRNTDtcbiAgfVxuXG4gIC8vLyBUaGlzIGVtcHR5IGlkZW50aWNvbiB3aWxsIGJlIGRpcGxheWVkIGlmIGEgd3JvbmcgU3Vic3RyYXRlIGFkZHJlc3MgaXMgcGFzc2VkXG4gIHN0YXRpYyByZW5kZXJFbXB0eUlkZW50aWNvbihzaXplOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBgPGRpdj5cbiAgICAgICAgICAgICAgPHN2ZyA6aGVpZ2h0PVwic2l6ZVwiIHZpZXdCb3g9XCIwIDAgNjQgNjRcIiA6d2lkdGg9XCJzaXplXCIgPlxuICAgICAgICAgICAgICAgIDxjaXJjbGUgY3g9XCI1MCVcIiBjeT1cIjUwJVwiIGZpbGw9XCIjZWVlXCIgcj1cIjUwJVwiIC8+XG4gICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC9kaXY+YDtcbiAgfVxuXG4gIC8vLyBUaGlzIGZ1bmN0aW9uIHJlbmRlcnMgdGhlIGpkZW50aWNvbiBpZGVudGljb24gd2hlbiB0aGUgamRlbnRpY29uIHRoZW1lIGlzIHBhc3NlZFxuICBzdGF0aWMgcmVuZGVySmlkZW50aWNvbihhZGRyZXNzOiBzdHJpbmcsIHNpemU6IG51bWJlcikge1xuICAgIHJldHVybiBqZGVudGljb24udG9TdmcoYWRkcmVzcywgc2l6ZSk7XG4gIH1cblxuICAvLy8gVGhpcyBoZWxwZXIgZnVuY3Rpb24gcGlja3MgdGhlIHRoZW1lIGFjY29yZGluZyB0byB0aGUgcGFzc2VkIHBhcmFtZXRlcnNcbiAgLy8vXG4gIHN0YXRpYyB0aGVtZUZpbHRlcih0aGVtZT86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHRoZW1lID09PSBUSEVNRVNfRU5VTS5QT0xLQURPVCB8fCAhdGhlbWUpIHtcbiAgICAgIHJldHVybiBUSEVNRVNfRU5VTS5QT0xLQURPVFxuICAgIH0gZWxzZSBpZiAodGhlbWUgPT09IFRIRU1FU19FTlVNLkJFQUNIQkFMTCkge1xuICAgICAgcmV0dXJuIFRIRU1FU19FTlVNLlBPTEtBRE9UXG4gICAgfSBlbHNlIGlmICh0aGVtZSA9PT0gVEhFTUVTX0VOVU0uSkRFTlRJQ09OKSB7XG4gICAgICByZXR1cm4gVEhFTUVTX0VOVU0uSkRFTlRJQ09OXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBUSEVNRVNfRU5VTS5FTVBUWVxuICAgIH1cbiAgfVxufSJdfQ==