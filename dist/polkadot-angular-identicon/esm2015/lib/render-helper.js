import { polkadotIcon, beachballIcon } from '@polkadot/ui-shared/icons';
import * as jdenticon from 'jdenticon';
import { DEFAULT_SIZE, THEMES_ENUM } from './constants';
export class RenderHelper {
    static pickRenderFunction(address, theme, size = DEFAULT_SIZE) {
        if (address) {
            switch (theme) {
                case THEMES_ENUM.POLKADOT:
                    return this.renderPolkadotIdenticon(address, '', false, size, '');
                case THEMES_ENUM.BEACHBALL:
                    return this.renderBeachballIdenticon(address, false, size);
                case THEMES_ENUM.JDENTICON:
                    return this.renderJidenticon(address, size);
                default:
                    return this.renderEmptyIdenticon(size);
            }
        }
        else {
            return this.renderEmptyIdenticon(size);
        }
    }
    static renderCircle({ cx, cy, fill, r }, key) {
        let svg = `<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                <circle cx="${cx}"  cy="${cy}" fill="${fill}"  r="${r}" />
                </svg>`;
        return svg;
    }
    static renderPolkadotIdenticon(address, className = '', isAlternative = false, size, style) {
        return `<svg
              class=${className}
              height=${size}
              id=${address}
              name=${address}
              style=${style}
              viewBox='0 0 64 64'
              width=${size}>
                    ${polkadotIcon(address, { isAlternative })
            .map(this.renderCircle)}
            </svg>`;
    }
    static renderBeachballIdenticon(address, isAlternative = false, size) {
        let generatedBeachballIcon = beachballIcon(address, { isAlternative: isAlternative, size });
        return generatedBeachballIcon.innerHTML;
    }
    static renderEmptyIdenticon(size) {
        return `<div>
              <svg :height="size" viewBox="0 0 64 64" :width="size" >
                <circle cx="50%" cy="50%" fill="#eee" r="50%" />
              </svg>
            </div>`;
    }
    static renderJidenticon(address, size) {
        return jdenticon.toSvg(address, size);
    }
    static themeFilter(theme) {
        if (theme === THEMES_ENUM.POLKADOT || !theme) {
            return THEMES_ENUM.POLKADOT;
        }
        else if (theme === THEMES_ENUM.BEACHBALL) {
            return THEMES_ENUM.POLKADOT;
        }
        else if (theme === THEMES_ENUM.JDENTICON) {
            return THEMES_ENUM.JDENTICON;
        }
        else {
            return THEMES_ENUM.EMPTY;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLWhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3BvbGthZG90LWFuZ3VsYXItaWRlbnRpY29uL3NyYy9saWIvcmVuZGVyLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXhFLE9BQU8sS0FBSyxTQUFTLE1BQU0sV0FBVyxDQUFDO0FBRXZDLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhELE1BQU0sT0FBTyxZQUFZO0lBRXZCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxPQUFlLEVBQUUsS0FBYSxFQUFFLE9BQWUsWUFBWTtRQUNuRixJQUFJLE9BQU8sRUFBRTtZQUNYLFFBQVEsS0FBSyxFQUFFO2dCQUNiLEtBQUssV0FBVyxDQUFDLFFBQVE7b0JBQ3ZCLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFFcEUsS0FBSyxXQUFXLENBQUMsU0FBUztvQkFDeEIsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFFN0QsS0FBSyxXQUFXLENBQUMsU0FBUztvQkFDeEIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUU5QztvQkFDRSxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMxQztTQUNGO2FBQU07WUFDTixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUN0QztJQUVILENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFVLEVBQUUsR0FBVztRQUMxRCxJQUFJLEdBQUcsR0FBRzs4QkFDZ0IsRUFBRSxVQUFVLEVBQUUsV0FBVyxJQUFJLFNBQVMsQ0FBQzt1QkFDOUMsQ0FBQztRQUNwQixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxNQUFNLENBQUMsdUJBQXVCLENBQUMsT0FBZSxFQUFFLFNBQVMsR0FBRyxFQUFFLEVBQUUsYUFBYSxHQUFHLEtBQUssRUFBRSxJQUFZLEVBQUUsS0FBYTtRQUNoSCxPQUFPO3NCQUNXLFNBQVM7dUJBQ1IsSUFBSTttQkFDUixPQUFPO3FCQUNMLE9BQU87c0JBQ04sS0FBSzs7c0JBRUwsSUFBSTtzQkFDSixZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUUsYUFBYSxFQUFFLENBQUM7YUFDckQsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7bUJBQ1osQ0FBQztJQUNsQixDQUFDO0lBRUQsTUFBTSxDQUFDLHdCQUF3QixDQUFDLE9BQWUsRUFBRSxhQUFhLEdBQUcsS0FBSyxFQUFFLElBQVk7UUFDbEYsSUFBSSxzQkFBc0IsR0FDeEIsYUFBYSxDQUFDLE9BQU8sRUFDbkIsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUN2QyxDQUFDO1FBQ0osT0FBTyxzQkFBc0IsQ0FBQyxTQUFTLENBQUM7SUFDMUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFZO1FBQ3RDLE9BQU87Ozs7bUJBSVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQWUsRUFBRSxJQUFZO1FBQ25ELE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUdELE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBYztRQUMvQixJQUFJLEtBQUssS0FBSyxXQUFXLENBQUMsUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzVDLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQTtTQUM1QjthQUFNLElBQUksS0FBSyxLQUFLLFdBQVcsQ0FBQyxTQUFTLEVBQUU7WUFDMUMsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFBO1NBQzVCO2FBQU0sSUFBSSxLQUFLLEtBQUssV0FBVyxDQUFDLFNBQVMsRUFBRTtZQUMxQyxPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUE7U0FDN0I7YUFBTTtZQUNMLE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQTtTQUN6QjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBvbGthZG90SWNvbiwgYmVhY2hiYWxsSWNvbiB9IGZyb20gJ0Bwb2xrYWRvdC91aS1zaGFyZWQvaWNvbnMnO1xuaW1wb3J0IHsgQ2lyY2xlIH0gZnJvbSAnQHBvbGthZG90L3VpLXNoYXJlZC9pY29ucy90eXBlcyc7XG5pbXBvcnQgKiBhcyBqZGVudGljb24gZnJvbSAnamRlbnRpY29uJztcblxuaW1wb3J0IHsgREVGQVVMVF9TSVpFLCBUSEVNRVNfRU5VTSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZXhwb3J0IGNsYXNzIFJlbmRlckhlbHBlciB7XG5cbiAgc3RhdGljIHBpY2tSZW5kZXJGdW5jdGlvbihhZGRyZXNzOiBzdHJpbmcsIHRoZW1lOiBzdHJpbmcsIHNpemU6IG51bWJlciA9IERFRkFVTFRfU0laRSk6IHN0cmluZyB7XG4gICAgaWYgKGFkZHJlc3MpIHtcbiAgICAgIHN3aXRjaCAodGhlbWUpIHtcbiAgICAgICAgY2FzZSBUSEVNRVNfRU5VTS5QT0xLQURPVDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJQb2xrYWRvdElkZW50aWNvbihhZGRyZXNzLCAnJywgZmFsc2UsIHNpemUsICcnKTtcblxuICAgICAgICBjYXNlIFRIRU1FU19FTlVNLkJFQUNIQkFMTDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJCZWFjaGJhbGxJZGVudGljb24oYWRkcmVzcywgZmFsc2UsIHNpemUpO1xuXG4gICAgICAgIGNhc2UgVEhFTUVTX0VOVU0uSkRFTlRJQ09OOlxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlckppZGVudGljb24oYWRkcmVzcywgc2l6ZSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJFbXB0eUlkZW50aWNvbihzaXplKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICByZXR1cm4gdGhpcy5yZW5kZXJFbXB0eUlkZW50aWNvbihzaXplKVxuICAgIH1cblxuICB9XG5cbiAgc3RhdGljIHJlbmRlckNpcmNsZSh7IGN4LCBjeSwgZmlsbCwgciB9OiBDaXJjbGUsIGtleTogbnVtYmVyKSB7XG4gICAgbGV0IHN2ZyA9IGA8c3ZnIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PVwiJHtjeH1cIiAgY3k9XCIke2N5fVwiIGZpbGw9XCIke2ZpbGx9XCIgIHI9XCIke3J9XCIgLz5cbiAgICAgICAgICAgICAgICA8L3N2Zz5gO1xuICAgIHJldHVybiBzdmc7XG4gIH1cblxuICBzdGF0aWMgcmVuZGVyUG9sa2Fkb3RJZGVudGljb24oYWRkcmVzczogc3RyaW5nLCBjbGFzc05hbWUgPSAnJywgaXNBbHRlcm5hdGl2ZSA9IGZhbHNlLCBzaXplOiBudW1iZXIsIHN0eWxlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYDxzdmdcbiAgICAgICAgICAgICAgY2xhc3M9JHtjbGFzc05hbWV9XG4gICAgICAgICAgICAgIGhlaWdodD0ke3NpemV9XG4gICAgICAgICAgICAgIGlkPSR7YWRkcmVzc31cbiAgICAgICAgICAgICAgbmFtZT0ke2FkZHJlc3N9XG4gICAgICAgICAgICAgIHN0eWxlPSR7c3R5bGV9XG4gICAgICAgICAgICAgIHZpZXdCb3g9JzAgMCA2NCA2NCdcbiAgICAgICAgICAgICAgd2lkdGg9JHtzaXplfT5cbiAgICAgICAgICAgICAgICAgICAgJHtwb2xrYWRvdEljb24oYWRkcmVzcywgeyBpc0FsdGVybmF0aXZlIH0pXG4gICAgICAgIC5tYXAodGhpcy5yZW5kZXJDaXJjbGUpfVxuICAgICAgICAgICAgPC9zdmc+YDtcbiAgfVxuXG4gIHN0YXRpYyByZW5kZXJCZWFjaGJhbGxJZGVudGljb24oYWRkcmVzczogc3RyaW5nLCBpc0FsdGVybmF0aXZlID0gZmFsc2UsIHNpemU6IG51bWJlcik6IHN0cmluZyB7XG4gICAgbGV0IGdlbmVyYXRlZEJlYWNoYmFsbEljb24gPVxuICAgICAgYmVhY2hiYWxsSWNvbihhZGRyZXNzLFxuICAgICAgICB7IGlzQWx0ZXJuYXRpdmU6IGlzQWx0ZXJuYXRpdmUsIHNpemUgfSxcbiAgICAgICk7XG4gICAgcmV0dXJuIGdlbmVyYXRlZEJlYWNoYmFsbEljb24uaW5uZXJIVE1MO1xuICB9XG5cbiAgc3RhdGljIHJlbmRlckVtcHR5SWRlbnRpY29uKHNpemU6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIGA8ZGl2PlxuICAgICAgICAgICAgICA8c3ZnIDpoZWlnaHQ9XCJzaXplXCIgdmlld0JveD1cIjAgMCA2NCA2NFwiIDp3aWR0aD1cInNpemVcIiA+XG4gICAgICAgICAgICAgICAgPGNpcmNsZSBjeD1cIjUwJVwiIGN5PVwiNTAlXCIgZmlsbD1cIiNlZWVcIiByPVwiNTAlXCIgLz5cbiAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICA8L2Rpdj5gO1xuICB9XG5cbiAgc3RhdGljIHJlbmRlckppZGVudGljb24oYWRkcmVzczogc3RyaW5nLCBzaXplOiBudW1iZXIpIHtcbiAgICByZXR1cm4gamRlbnRpY29uLnRvU3ZnKGFkZHJlc3MsIHNpemUpO1xuICB9XG5cblxuICBzdGF0aWMgdGhlbWVGaWx0ZXIodGhlbWU/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh0aGVtZSA9PT0gVEhFTUVTX0VOVU0uUE9MS0FET1QgfHwgIXRoZW1lKSB7XG4gICAgICByZXR1cm4gVEhFTUVTX0VOVU0uUE9MS0FET1RcbiAgICB9IGVsc2UgaWYgKHRoZW1lID09PSBUSEVNRVNfRU5VTS5CRUFDSEJBTEwpIHtcbiAgICAgIHJldHVybiBUSEVNRVNfRU5VTS5QT0xLQURPVFxuICAgIH0gZWxzZSBpZiAodGhlbWUgPT09IFRIRU1FU19FTlVNLkpERU5USUNPTikge1xuICAgICAgcmV0dXJuIFRIRU1FU19FTlVNLkpERU5USUNPTlxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gVEhFTUVTX0VOVU0uRU1QVFlcbiAgICB9XG4gIH1cbn0iXX0=