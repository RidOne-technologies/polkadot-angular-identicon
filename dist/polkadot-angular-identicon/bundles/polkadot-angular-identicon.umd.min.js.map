{"version":3,"sources":["../../../projects/polkadot-angular-identicon/src/lib/constants.ts","../../../projects/polkadot-angular-identicon/src/lib/render-helper.ts","../../../projects/polkadot-angular-identicon/src/lib/polkadot-angular-identicon.component.ts","../../../projects/polkadot-angular-identicon/src/lib/polkadot-angular-identicon.module.ts"],"names":["THEMES_ENUM","RenderHelper","pickRenderFunction","address","theme","size","this","renderEmptyIdenticon","POLKADOT","renderPolkadotIdenticon","BEACHBALL","renderBeachballIdenticon","JDENTICON","renderJidenticon","renderCircle","_a","cx","cy","fill","r","isAlternative","polkadotIcon","map","join","beachballIcon","innerHTML","jdenticon.toSvg","PolkadotIdentIconComponent","sanitizer","prototype","ngOnInit","iconHTML","bypassSecurityTrustHtml","getStyle","width","height","Component","args","selector","template","DomSanitizer","Input","NgModule","declarations","imports","CommonModule","BrowserModule","exports"],"mappings":"omBACO,IAUKA,GAAZ,SAAYA,GACRA,EAAA,SAAA,WACAA,EAAA,UAAA,YACAA,EAAA,UAAA,YACAA,EAAA,MAAA,QAJJ,CAAYA,IAAAA,EAAW,KCLvB,IAAAC,EAAA,WAAA,SAAAA,YAgBSA,EAAAC,mBAAP,SAA0BC,EAAiBC,EAAeC,GACxD,QADwD,IAAAA,IAAAA,EDrBhC,KCsBpBF,EAeF,OAAOG,KAAKC,qBAAqBF,GAdjC,OAAQD,GACN,KAAKJ,EAAYQ,SACf,OAAOF,KAAKG,wBAAwBN,GAAS,EAAOE,GAEtD,KAAKL,EAAYU,UACf,OAAOJ,KAAKK,yBAAyBR,GAAS,EAAOE,GAEvD,KAAKL,EAAYY,UACf,OAAON,KAAKO,iBAAiBV,EAASE,GAExC,QACE,OAAOC,KAAKC,qBAAqBF,KAclCJ,EAAAa,aAAP,SAAoBC,GAIlB,MAHU,+FADYA,EAAAC,GAEM,UAFFD,EAAAE,GAEc,WAFRF,EAAAG,KAEuB,SAFpBH,EAAAI,EAE8B,gCAY5DlB,EAAAQ,wBAAP,SAA+BN,EAAiBiB,EAAuBf,GACrE,YAD8C,IAAAe,IAAAA,GAAA,GACvC,4BACUf,EAAI,wDAELA,EAAI,kBACVgB,EAAAA,aAAalB,EAAS,CAAEiB,cAAaA,EAAEf,KAAIA,IAAIiB,IAAIhB,KAAKQ,cAAcS,KAAK,IAAG,wBAYnFtB,EAAAU,yBAAP,SAAgCR,EAAiBiB,EAAuBf,GAKtE,YAL+C,IAAAe,IAAAA,GAAA,GAE7CI,EAAAA,cAAcrB,EACZ,CAAEiB,cAAeA,EAAef,KAAIA,IAEVoB,WAQzBxB,EAAAM,qBAAP,SAA4BF,GAC1B,MAAO,4LAaFJ,EAAAY,iBAAP,SAAwBV,EAAiBE,GACvC,OAAOqB,EAAAA,MAAgBvB,EAASE,MAtGpC,gBC+BE,SAAAsB,EAAoBC,GAAAtB,KAAAsB,UAAAA,EAfXtB,KAAAD,KFrBiB,GE2BjBC,KAAAF,MAAiBJ,EAAYQ,gBAWtCmB,EAAAE,UAAAC,SAAA,WACExB,KAAKyB,SAAWzB,KAAKsB,UAAUI,wBAC7B/B,EAAaC,mBAAmBI,KAAKH,QAASG,KAAKF,MAAOE,KAAKD,QAUnEsB,EAAAE,UAAAI,SAAA,WACE,MAAO,CACLC,MAAO5B,KAAKD,KAAO,KACnB8B,OAAQ7B,KAAKD,KAAO,gCAjDzB+B,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,6BACVC,SAAU,yGANHC,EAAAA,iDAeNC,EAAAA,oBAMAA,EAAAA,qBAMAA,EAAAA,eClBH,iCALCC,EAAAA,SAAQL,KAAA,CAAC,CACRM,aAAc,CAAChB,GACfiB,QAAS,CAACC,EAAAA,aAAcC,EAAAA,eACxBC,QAAS,CAACpB","sourcesContent":["/** @constant DEFAULT_SIZE  default size of the icon when size attribute not passed */\r\nexport const DEFAULT_SIZE = 64;\r\n\r\n/** @constant DEFAULT_THEME : default theme of the icon when theme attribute not passed */\r\nexport const DEFAULT_THEME = 'polkadot';\r\n\r\n/** \r\n * @enum THEMES_ENUM : This enum contains the different possibles themes that can\r\n * be set on the polkadot-angular-identicon component tag \r\n *  polkadot, beachball, jdenticon and empty \r\n */\r\nexport enum THEMES_ENUM {\r\n    POLKADOT = 'polkadot',\r\n    BEACHBALL = 'beachball',\r\n    JDENTICON = 'jdenticon',\r\n    EMPTY = 'empty'\r\n}","import { polkadotIcon, beachballIcon } from '@polkadot/ui-shared/icons';\r\nimport { Circle } from '@polkadot/ui-shared/icons/types';\r\nimport * as jdenticon from 'jdenticon';\r\n\r\nimport { DEFAULT_SIZE, THEMES_ENUM } from './constants';\r\n\r\nexport class RenderHelper {\r\n\r\n  /**\r\n   * pickRenderFunction : Accourding to the theme passed, this function picks a render function between:\r\n   * \r\n   * renderPolkadotIdenticon,\r\n   * renderBeachballIdenticon,\r\n   * renderJidenticon,\r\n   * and renderEmptyIdenticon\r\n   * \r\n   * When no theme is passed it default to polkadot theme.\r\n   * @param address Substrate based chain address \r\n   * @param theme theme of the identicon (defaulst to polkadot)\r\n   * @param size size of the identicon (defaults to 64px)\r\n   * @returns the the generated html that to display the identicon.\r\n   */\r\n  static pickRenderFunction(address: string, theme: string, size: number = DEFAULT_SIZE): string {\r\n    if (address) {\r\n      switch (theme) {\r\n        case THEMES_ENUM.POLKADOT:\r\n          return this.renderPolkadotIdenticon(address, false, size);\r\n\r\n        case THEMES_ENUM.BEACHBALL:\r\n          return this.renderBeachballIdenticon(address, false, size);\r\n\r\n        case THEMES_ENUM.JDENTICON:\r\n          return this.renderJidenticon(address, size);\r\n\r\n        default:\r\n          return this.renderEmptyIdenticon(size);\r\n      }\r\n    } else {\r\n      return this.renderEmptyIdenticon(size)\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * @description This function renders a small circle with a color in a polkadot identicon theme.\r\n   * It is internally called in renderPolkadotIdenticon function that will pass.\r\n   * @param Circle represent a small circle that is part of circles in a polkadot icon\r\n   * @returns A SVG representing a small circle that is part of the array of the circles in a polkadot icon\r\n   */\r\n  static renderCircle({ cx, cy, fill, r }: Circle) {\r\n    let svg = `<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <circle cx=\"${cx}\"  cy=\"${cy}\" fill=\"${fill}\"  r=\"${r}\" />\r\n                </svg>`;\r\n    return svg;\r\n  }\r\n\r\n  /**\r\n   * @description  This function renders the polkadot identicon when the polkadot theme is passed\r\n   * @param address Substrate based chain address \r\n   * @param isAlternative \r\n   * @param size size of the identicon (defaults to 64px)\r\n   * @returns A SVG representing array of the circles that make up the polkadot identicon\r\n   */\r\n  static renderPolkadotIdenticon(address: string, isAlternative = false, size: number) {\r\n    return `<svg\r\n            height=${size}\r\n            viewBox='0 0 64 64'\r\n            width=${size}>\r\n            ${polkadotIcon(address, { isAlternative, size }).map(this.renderCircle).join('')}\r\n            </svg>`;\r\n\r\n  }\r\n\r\n  /**\r\n   * @description This function renders the beachball identicon when the beachball theme is passed\r\n   * @param address Substrate based chain address \r\n   * @param isAlternative \r\n   * @param size size of the identicon (defaults to 64px)\r\n   * @returns  A SVG representing the beachball identicon\r\n   */\r\n  static renderBeachballIdenticon(address: string, isAlternative = false, size: number): string {\r\n    let generatedBeachballIcon =\r\n      beachballIcon(address,\r\n        { isAlternative: isAlternative, size },\r\n      );\r\n    return generatedBeachballIcon.innerHTML;\r\n  }\r\n\r\n  /**\r\n   * @description This empty identicon will be diplayed if a wrong Substrate address is passed\r\n   * @param size size of the identicon (defaults to 64px)\r\n   * @returns A light gray colored SVG icon that represent an empty icon\r\n   */\r\n  static renderEmptyIdenticon(size: number): string {\r\n    return `<div>\r\n              <svg :height=\"size\" viewBox=\"0 0 64 64\" :width=\"size\" >\r\n                <circle cx=\"50%\" cy=\"50%\" fill=\"#eee\" r=\"50%\" />\r\n              </svg>\r\n            </div>`;\r\n  }\r\n\r\n  /**\r\n   * @description This function renders the jdenticon identicon when the jdenticon theme is passed\r\n   * @param address Substrate based chain address \r\n   * @param size size of the identicon (defaults to 64px)\r\n   * @returns  A SVG representing the jdenticon (from jdenticon ibrary ) identicon\r\n   */\r\n  static renderJidenticon(address: string, size: number) {\r\n    return jdenticon.toSvg(address, size);\r\n  }\r\n}","import { Component, Input, OnInit } from \"@angular/core\";\r\nimport { DomSanitizer, SafeHtml } from \"@angular/platform-browser\";\r\nimport { RenderHelper } from \"./render-helper\";\r\nimport { DEFAULT_SIZE, THEMES_ENUM } from \"./constants\";\r\n\r\n@Component({\r\n  selector: \"polkadot-angular-identicon\",\r\n  template: `<div [innerHTML]=\"iconHTML\" [ngStyle]=\"getStyle()\"></div>`,\r\n  styles: [],\r\n})\r\nexport class PolkadotIdentIconComponent implements OnInit {\r\n\r\n  /**\r\n   * @field address passed when using the polkadot-angular-identicon tag \r\n   * to display the icon\r\n   */\r\n  @Input() address?: any;\r\n\r\n  /**\r\n   *  @field  size passed when using the polkadot-angular-identicon tag\r\n   *  to set the icon size \r\n  */\r\n  @Input() size?: any = DEFAULT_SIZE;\r\n\r\n  /** \r\n  * @field  theme passed when using the polkadot-angular-identicon tag \r\n  * to set the theme of the icon \r\n  */\r\n  @Input() theme?: string = THEMES_ENUM.POLKADOT;\r\n\r\n\r\n  /** \r\n  * @field  iconHTML : as SafeHTML object that the value will be set by the pickRenderFunction from \r\n  * the RenderHelper class. \r\n  */\r\n  iconHTML?: SafeHtml;\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  ngOnInit(): void {\r\n    this.iconHTML = this.sanitizer.bypassSecurityTrustHtml(\r\n      RenderHelper.pickRenderFunction(this.address, this.theme, this.size)\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @returns an object that contains the width and height properties in pixel that will be passed \r\n   * to the angular ngStyle directive in the component (polkadot-angular-identicon) .\r\n   */\r\n  getStyle() {\r\n    return {\r\n      width: this.size + \"px\",\r\n      height: this.size + \"px\",\r\n    };\r\n  }\r\n\r\n}\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { PolkadotIdentIconComponent } from \"./polkadot-angular-identicon.component\";\r\n\r\n@NgModule({\r\n  declarations: [PolkadotIdentIconComponent],\r\n  imports: [CommonModule, BrowserModule],\r\n  exports: [PolkadotIdentIconComponent],\r\n})\r\nexport class PolkadotIdentIconModule {}\r\n"]}